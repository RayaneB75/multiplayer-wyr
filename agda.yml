apiVersion: v1
kind: Secret
metadata:
  name: ${APP_NAME}-secrets
  namespace: $NAMESPACE
type: Opaque
stringData:
  MYSQL_DATABASE: $MYSQL_DATABASE
  MYSQL_USER: $MYSQL_USER
  MYSQL_PASSWORD: $MYSQL_PASSWORD
  MYSQL_REPLICATION_USER: $MYSQL_REPLICATION_USER
  MYSQL_REPLICATION_PASSWORD: $MYSQL_REPLICATION_PASSWORD
  DASH_TOKEN: $DASH_TOKEN
  FRONT_TOKEN: $FRONT_TOKEN
  JWT_SECRET_KEY: $JWT_SECRET_KEY

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $APP_NAME
  namespace: $NAMESPACE
spec:
  selector:
    matchLabels:
      app: $APP_NAME
  replicas: 2
  template:
    metadata:
      labels:
        app: $APP_NAME
    spec:
      containers:
      - name: front
        image: $IMAGE_FRONT_LATEST
        env:
        - name: FRONT_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: FRONT_TOKEN
        - name: API_SRV_HOSTNAME
          value: "localhost"
        - name: API_SRV_PORT
          value: "5000"
        - name: API_SRV_PROTOCOL
          value: "http"
        ports:
        - containerPort: 80
      - name: back
        image: $IMAGE_BACK_LATEST
        env:
        - name: MYSQL_HOST
          value: "${APP_NAME}-db-0.${APP_NAME}-db"
        - name: MYSQL_PORT
          value: "3306"
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: MYSQL_PASSWORD
        - name: FRONT_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: FRONT_TOKEN
        - name: DASH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: DASH_TOKEN
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: JWT_SECRET_KEY
        ports:
        - containerPort: 5000
      imagePullSecrets:
        - name: docker-registry-secret
---

apiVersion: v1
kind: Service
metadata:
  name: $APP_NAME
  namespace: $NAMESPACE
spec:
  selector:
    app: $APP_NAME
  ports:
    - name: front
      protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: ${APP_NAME}-db-configmap
  namespace: $NAMESPACE
data:
  primary.cnf: |
    # Apply this config only on the primary.
    [mysqld]
    log-bin    
  replica.cnf: |
    # Apply this config only on replicas.
    [mysqld]
    super-read-only  
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${APP_NAME}-db
  namespace: $NAMESPACE
spec:
  serviceName: ${APP_NAME}-db
  replicas: 3
  selector:
    matchLabels:
      app: ${APP_NAME}-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: ${APP_NAME}-db
    spec:
      containers:
      - name: mysql
        image: mysql:latest
        env:
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secrets
                key: MYSQL_DATABASE
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secrets
                key: MYSQL_USER
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secrets
                key: MYSQL_PASSWORD
          - name: MYSQL_REPLICATION_USER
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secrets
                key: MYSQL_REPLICATION_USER
          - name: MYSQL_REPLICATION_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secrets
                key: MYSQL_REPLICATION_PASSWORD                
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: ${APP_NAME}-db-pvc
          mountPath: /var/lib/mysql
          subPath: mysql
  volumeClaimTemplates:
  - metadata:
      name: ${APP_NAME}-db-pvc
      namespace: $NAMESPACE
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
---

apiVersion: v1
kind: Service
metadata:
  name: ${APP_NAME}-db
  namespace: $NAMESPACE
spec:
  ports:
    - name: ${APP_NAME}-db
      port: 3306
  clusterIP: None
  selector:
    app: ${APP_NAME}-db

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $APP_NAME
  namespace: $NAMESPACE
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - $APP_URL
    secretName: $TLS_SECRET_NAME
  rules:
  - host: $APP_URL
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: $APP_NAME
            port:
              number: 80