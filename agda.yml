apiVersion: v1
kind: Secret
metadata:
  name: ${APP_NAME}-secrets
  namespace: $NAMESPACE
type: Opaque
stringData:
  POSTGRES_PASSWORD: $DB_PASSWORD
  DJANGO_SECRET: $DJANGO_SECRET
  REPMGR_PASSWORD: $REPMGR_PASSWORD
  PGPOOL_ADMIN_PASSWORD: $PGPOOL_ADMIN_PASSWORD
  POSTGRES_ADMIN_PASSWORD: $POSTGRES_ADMIN_PASSWORD
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${APP_NAME}-django-pvc
  namespace: $NAMESPACE
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $APP_NAME
  namespace: $NAMESPACE
spec:
  selector:
    matchLabels:
      app: $APP_NAME
  replicas: 2
  template:
    metadata:
      labels:
        app: $APP_NAME
    spec:
      volumes:
      - name: django-pv
        persistentVolumeClaim:
          claimName: ${APP_NAME}-django-pvc
      initContainers:
      - name: django-static
        image: $IMAGE
        env:
        - name: STATIC_ROOT_PATH
          value: "/usr/share/nginx/html"
        volumeMounts:
        - name: django-pv
          mountPath: /usr/share/nginx/html
          subPath: static
        command: [ "python3", "manage.py", "collectstatic", "--noinput" ]
      containers:
      - name: django
        image: $IMAGE
        env:
        - name: POSTGRES_HOST
          value: ${APP_NAME}-pgpool
        - name: DJANGO_URL
          value: $APP_URL
        - name: POSTGRES_DB
          value: $DB_NAME
        - name: POSTGRES_USER
          value: $DB_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: POSTGRES_PASSWORD
        - name: DJANGO_SECRET
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: DJANGO_SECRET
        volumeMounts:
        - name: django-pv
          mountPath: /code/media_db
          subPath: media_db
        ports:
        - containerPort: 8000
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: django-pv
          mountPath: /usr/share/nginx/html/static
          subPath: static
        - name: django-pv
          mountPath: /usr/share/nginx/html/media_db
          subPath: media_db
          readOnly: true
      imagePullSecrets:
        - name: docker-registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: $APP_NAME
  namespace: $NAMESPACE
spec:
  selector:
    app: $APP_NAME
  ports:
    - name: django
      protocol: TCP
      port: 8000
      targetPort: 8000
    - name: nginx
      protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP


---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${APP_NAME}-db
  namespace: $NAMESPACE
spec:
  serviceName: ${APP_NAME}-db
  replicas: 3
  selector:
    matchLabels:
      app: ${APP_NAME}-db
  template:
    metadata:
      labels:
        app: ${APP_NAME}-db
    spec:    
      volumes:
      - name: db-backup
        configMap:
          name: db-backup
      containers:
      - name: db
        image: bitnami/postgresql-repmgr:15-debian-11
        imagePullPolicy: "IfNotPresent"
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_VOLUME_DIR
          value: /var/lib/postgresql/data
        - name: POSTGRESQL_DATABASE
          value: $DB_NAME
        - name: POSTGRESQL_USERNAME
          value: $DB_USER
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRESQL_POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: POSTGRES_ADMIN_PASSWORD
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: STATEFULSET_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: REPMGR_PARTNER_NODES
          value: "${APP_NAME}-db-0.${APP_NAME}-db.$(STATEFULSET_NAMESPACE).svc.cluster.local,${APP_NAME}-db-1.${APP_NAME}-db.$(STATEFULSET_NAMESPACE).svc.cluster.local,${APP_NAME}-db-2.${APP_NAME}-db.$(STATEFULSET_NAMESPACE).svc.cluster.local"
        - name: REPMGR_PRIMARY_HOST
          value: "${APP_NAME}-db-0.${APP_NAME}-db.$(STATEFULSET_NAMESPACE).svc.cluster.local"
        - name: REPMGR_NODE_NAME
          value: "$(POD_NAME)"
        - name: REPMGR_NODE_NETWORK_NAME
          value: "$(POD_NAME).${APP_NAME}-db.$(STATEFULSET_NAMESPACE).svc.cluster.local"
        - name: REPMGR_USERNAME
          value: "repmgr"
        - name: REPMGR_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-secrets
              key: REPMGR_PASSWORD  
        volumeMounts:
        - name: ${APP_NAME}-db-pvc
          mountPath: /var/lib/postgresql/data
        - name: db-backup
          mountPath: /docker-entrypoint-initdb.d/
        ports:
        - containerPort: 5432
  volumeClaimTemplates:
  - metadata:
      name: ${APP_NAME}-db-pvc
      namespace: $NAMESPACE
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: ${APP_NAME}-db
  namespace: $NAMESPACE
spec:
  ports:
    - name: ${APP_NAME}-db
      port: 5432
  clusterIP: None
  selector:
    app: ${APP_NAME}-db


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}-pgpool
  namespace: $NAMESPACE
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: ${APP_NAME}-pgpool
  template:
    metadata:
      labels: 
        app: ${APP_NAME}-pgpool
    spec:          
      securityContext:
        fsGroup: 1001
      containers:
        - name: pgpool
          image: bitnami/pgpool:4-debian-11
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: PGPOOL_BACKEND_NODES
              value: 0:${APP_NAME}-db-0.${APP_NAME}-db:5432,1:${APP_NAME}-db-1.${APP_NAME}-db:5432,2:${APP_NAME}-db-2.${APP_NAME}-db:5432
            - name: PGPOOL_SR_CHECK_USER
              value: "repmgr"
            - name: PGPOOL_SR_CHECK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-secrets
                  key: REPMGR_PASSWORD
            - name: PGPOOL_SR_CHECK_DATABASE
              value: $DB_NAME
            - name: PGPOOL_POSTGRES_USERNAME
              value: $DB_USER
            - name: PGPOOL_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-secrets
                  key: POSTGRES_PASSWORD
            - name: PGPOOL_ADMIN_USERNAME
              value: "admin"
            - name: PGPOOL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-secrets
                  key: PGPOOL_ADMIN_PASSWORD
            - name: PGPOOL_ENABLE_LOAD_BALANCING
              value: "yes"
            - name: PGPOOL_ENABLE_LOG_CONNECTIONS
              value: "no"
            - name: PGPOOL_ENABLE_LOG_HOSTNAME
              value: "yes"
            - name: PGPOOL_ENABLE_LOG_PER_NODE_STATEMENT
              value: "no"
            - name: PGPOOL_CHILD_LIFE_TIME
              value: ""
            - name: PGPOOL_ENABLE_TLS
              value: "no"
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/pgpool/healthcheck.sh
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
---
apiVersion: v1
kind: Service
metadata:
  name: ${APP_NAME}-pgpool
  namespace: $NAMESPACE
spec:
  ports:
    - name: ${APP_NAME}-pgpool
      port: 5432
  selector:
    app: ${APP_NAME}-pgpool


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $APP_NAME
  namespace: $NAMESPACE
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - $APP_URL
    secretName: $TLS_SECRET_NAME
  rules:
  - host: $APP_URL
    http:
      paths:
      - path: /static
        pathType: Prefix
        backend:
          service:
            name: $APP_NAME
            port:
              number: 80
      - path: /media_db
        pathType: Prefix
        backend:
          service:
            name: $APP_NAME
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: $APP_NAME
            port:
              number: 8000